include: 
  - local: 'nginx-app/.gitlab-ci.yml'

stages:
  - build
  - deploy
  - validate
  - plan
  - apply
  - destroy

image:
  name: hashicorp/terraform:light
  entrypoint:
    - '/usr/bin/env'
    - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'

cache:
  paths:
    - .terraform

variables:
  YC_SA_KEY_FILE: sa_key.json
  YC_BACKEND_KEY_FILE: /tmp/backend.secret.tfvars

.validate_common: &terraform_common
  tags:
    - terraform
  before_script:
    - |
      echo "Terraform setup for stage: $CI_JOB_STAGE"
      cat <<EOF >> ~/.terraformrc 
      provider_installation {
          network_mirror {
            url = "https://terraform-mirror.yandexcloud.net/"
            include = ["registry.terraform.io/*/*"]
          }
          direct {
            exclude = ["registry.terraform.io/*/*"]
          }
      }
      EOF
    - echo "$YC_KEY" | base64 -d > terraform-main/sa_key.json
    - echo "$YC_BACKEND_CONFIG" > /tmp/backend.secret.tfvars
    - echo "$YC_BUCKET_SECRET_KEY"
    - terraform -chdir=terraform-main init -backend-config="access_key=$YC_BUCKET_ACCESS_KEY" -backend-config="secret_key=$YC_BUCKET_SECRET_KEY" -reconfigure

validate:
  <<: *terraform_common
  stage: validate
  script:
    - terraform -chdir=terraform-main validate
  rules:
    - if: '$CI_JOB_STAGE == "validate"'

plan:
  <<: *terraform_common
  stage: plan
  script:
    - terraform -chdir=terraform-main plan --out=tfstate
  artifacts:
    paths:
      - tfstate
  rules:
    - if: '$CI_JOB_STAGE == "plan"'

apply:
  <<: *terraform_common
  stage: apply
  script:
    - terraform -chdir=terraform-main apply
  dependencies:
    - plan
  rules:
    - if: '$CI_JOB_STAGE == "apply"'

destroy:
  <<: *terraform_common
  stage: destroy
  script:
    - terraform init 
    - terraform -chdir=terraform-main destroy -auto-approve
  when: manual
  dependencies:
    - apply
  rules:
    - if: '$CI_JOB_STAGE == "destroy"'
